using PortAudio.AutoGenerated;
using PortAudio.Utils;

namespace PortAudio.Wrapper;

public class HostApiInfo
{
    public static HostApiInfo Null = new HostApiInfo();
    public int StructVersion { get; }
    public PaHostApiTypeId Type { get; }
    public string Name { get; }
    public int DeviceCount { get; }
    public int DefaultInputDevice { get; }
    public int DefaultOutputDevice { get; }

    internal unsafe HostApiInfo(PaHostApiInfo* paHostApiInfo)
    {
        if ((nint)paHostApiInfo!=nint.Zero)
        {
            StructVersion = paHostApiInfo->structVersion;
            Type = paHostApiInfo->type_;
            Name = Helper.ConvertText(paHostApiInfo->name);
            DeviceCount = paHostApiInfo->deviceCount;
            DefaultInputDevice = paHostApiInfo->defaultInputDevice;
            DefaultOutputDevice = paHostApiInfo->defaultOutputDevice;
        }
        else{
            Name="";
        }
    }

    private HostApiInfo(){
        Name="";
    }
}