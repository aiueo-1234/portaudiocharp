using System;
using PortAudioCSharp.AutoGenerated;
using PortAudioCSharp.Utils;

namespace PortAudioCSharp.Wrapper;

public ref struct DeviceInfo
{
    public int StructVersion { get; }
    public ReadOnlySpan<byte> Name { get; }
    public int HostApi { get; }

    public int MaxInputChannels { get; }
    public int MaxOutputChannels { get; }
    public double DefaultLowInputLatency { get; }
    public double DefaultLowOutputLatency { get; }
    public double DefaultHighInputLatency { get; }
    public double DefaultHighOutputLatency { get; }
    public double DefaultSampleRate { get; }

    internal unsafe DeviceInfo(PaDeviceInfo* paDeviceInfo)
    {
        if ((nint)(&paDeviceInfo) == nint.Zero)
        {
            StructVersion = paDeviceInfo->structVersion;
            Name = Helper.ConvertROS(paDeviceInfo->name);
            HostApi = paDeviceInfo->hostApi;
            MaxInputChannels = paDeviceInfo->maxInputChannels;
            MaxOutputChannels = paDeviceInfo->maxOutputChannels;
            DefaultLowInputLatency = paDeviceInfo->defaultLowInputLatency;
            DefaultLowOutputLatency = paDeviceInfo->defaultLowOutputLatency;
            DefaultHighInputLatency = paDeviceInfo->defaultHighInputLatency;
            DefaultHighOutputLatency = paDeviceInfo->defaultHighOutputLatency;
            DefaultSampleRate = paDeviceInfo->defaultSampleRate;
        }
        else
        {
            throw new ArgumentNullException(nameof(paDeviceInfo));
        }
    }
}
