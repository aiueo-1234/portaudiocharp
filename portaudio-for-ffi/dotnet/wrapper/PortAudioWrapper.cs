using PortAudio.AutoGenerated;
using PortAudio.Utils;

namespace PortAudio.Wrapper;

public static class PortAudioWrapper
{
    public static unsafe string GetVersionText()
    {
        return Helper.ConvertText(NativeMethods.Pa_GetVersionText());
    }

    public static unsafe VersionInfo GetVersionInfo()
    {
        return new VersionInfo(NativeMethods.Pa_GetVersionInfo());
    }

    public static PaErrorCode Initialize()
    {
        return (PaErrorCode)NativeMethods.Pa_Initialize();
    }

    public static PaErrorCode Terminate()
    {
        return (PaErrorCode)NativeMethods.Pa_Terminate();
    }

    public static unsafe string GetErrorText(PaErrorCode errorCode)
    {
        return Helper.ConvertText(NativeMethods.Pa_GetErrorText((int)errorCode));
    }

    public static unsafe HostApiInfo GetHostApiInfo(int hostApi)
    {
        var paHostApiInfo = NativeMethods.Pa_GetHostApiInfo(hostApi);
        if ((nint)paHostApiInfo != nint.Zero)
        {
            return new HostApiInfo(paHostApiInfo);
        }
        else
        {
            return HostApiInfo.Null;
        }
    }

    public static int HostApiTypeIdToHostApiIndex(PaHostApiTypeId type)
    {
        return NativeMethods.Pa_HostApiTypeIdToHostApiIndex(type);
    }

    public static unsafe HostErrorInfo GetLastHostErrorInfo()
    {
        return new HostErrorInfo(NativeMethods.Pa_GetLastHostErrorInfo());
    }
}
