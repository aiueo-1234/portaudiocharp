using System;
using System.Runtime.InteropServices;
using PortAudioCSharp.AutoGenerated;

namespace PortAudioCSharp.Wrapper;

public sealed class StreamParameters(int device, int channelCount, nuint sampleFormat, double suggestedLatency, GCHandle? hostApiSpecificStreamInfo = null, bool leaveOpen = false) : IDisposable
{
    private bool _disposed;
    public bool LeaveOpen { get; } = leaveOpen;
    public int Device { get; } = device;
    public int ChannelCount { get; } = channelCount;
    public nuint SampleFormat { get; } = sampleFormat;
    public double SuggestedLatency { get; } = suggestedLatency;
    public GCHandle? HostApiSpecificStreamInfo { get; } = hostApiSpecificStreamInfo;

    internal unsafe PaStreamParameters ToPaStreamParameters()
    {
        return new PaStreamParameters()
        {
            device = Device,
            channelCount = ChannelCount,
            sampleFormat = new CULong(SampleFormat),
            suggestedLatency = SuggestedLatency,
            hostApiSpecificStreamInfo = HostApiSpecificStreamInfo.HasValue ? HostApiSpecificStreamInfo.Value.AddrOfPinnedObject().ToPointer() : (void*)nuint.Zero
        };
    }

    public void Dispose()
    {
        if (!_disposed && !LeaveOpen)
        {
            if (HostApiSpecificStreamInfo != null && HostApiSpecificStreamInfo.Value.IsAllocated)
                HostApiSpecificStreamInfo?.Free();
        }
        _disposed = true;
    }
}
