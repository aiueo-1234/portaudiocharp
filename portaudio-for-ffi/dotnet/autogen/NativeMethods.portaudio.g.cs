// <auto-generated>
// This code is generated by csbindgen.
// DON'T CHANGE THIS DIRECTLY.
// </auto-generated>
#pragma warning disable CS8500
#pragma warning disable CS8981
using System;
using System.Runtime.InteropServices;


namespace PortAudioCSharp.AutoGenerated
{
    internal static unsafe partial class NativeMethods
    {
        const string __DllName = "portaudio";



        /// <summary>Retrieve the release number of the currently running PortAudio build.For example, for version \"19.5.1\" this will return 0x00130501.@see paMakeVersionNumber</summary>
        [DllImport(__DllName, EntryPoint = "Pa_GetVersion", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int Pa_GetVersion();

        /// <summary>Retrieve a textual description of the current PortAudio build,e.g. \"PortAudio V19.5.0-devel, revision 1952M\".The format of the text may change in the future. Do not try to parse thereturned string.@deprecated As of 19.5.0, use Pa_GetVersionInfo()-&gt;versionText instead.</summary>
        [DllImport(__DllName, EntryPoint = "Pa_GetVersionText", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern byte* Pa_GetVersionText();

        /// <summary>Retrieve version information for the currently running PortAudio build.@return A pointer to an immutable PaVersionInfo structure.@note This function can be called at any time. It does not require PortAudioto be initialized. The structure pointed to is statically allocated. Do notattempt to free it or modify it.@see PaVersionInfo, paMakeVersionNumber@version Available as of 19.5.0.</summary>
        [DllImport(__DllName, EntryPoint = "Pa_GetVersionInfo", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern PaVersionInfo* Pa_GetVersionInfo();

        /// <summary>Translate the supplied PortAudio error code into a human readablemessage.</summary>
        [DllImport(__DllName, EntryPoint = "Pa_GetErrorText", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern byte* Pa_GetErrorText(int errorCode);

        /// <summary>Library initialization function - call this before using PortAudio.This function initializes internal data structures and prepares underlyinghost APIs for use.  With the exception of Pa_GetVersion(), Pa_GetVersionText(),and Pa_GetErrorText(), this function MUST be called before using any otherPortAudio API functions.If Pa_Initialize() is called multiple times, each successfulcall must be matched with a corresponding call to Pa_Terminate().Pairs of calls to Pa_Initialize()/Pa_Terminate() may overlap, and are notrequired to be fully nested.Note that if Pa_Initialize() returns an error code, Pa_Terminate() shouldNOT be called.@return paNoError if successful, otherwise an error code indicating the causeof failure.@see Pa_Terminate</summary>
        [DllImport(__DllName, EntryPoint = "Pa_Initialize", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int Pa_Initialize();

        /// <summary>Library termination function - call this when finished using PortAudio.This function deallocates all resources allocated by PortAudio since it wasinitialized by a call to Pa_Initialize(). In cases where Pa_Initialise() hasbeen called multiple times, each call must be matched with a corresponding callto Pa_Terminate(). The final matching call to Pa_Terminate() will automaticallyclose any PortAudio streams that are still open.Pa_Terminate() MUST be called before exiting a program which uses PortAudio.Failure to do so may result in serious resource leaks, such as audio devicesnot being available until the next reboot.@return paNoError if successful, otherwise an error code indicating the causeof failure.@see Pa_Initialize</summary>
        [DllImport(__DllName, EntryPoint = "Pa_Terminate", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int Pa_Terminate();

        /// <summary>Retrieve the number of available host APIs. Even if a host API isavailable it may have no devices available.@return A non-negative value indicating the number of available host APIsor, a PaErrorCode (which are always negative) if PortAudio is not initializedor an error is encountered.@see PaHostApiIndex</summary>
        [DllImport(__DllName, EntryPoint = "Pa_GetHostApiCount", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int Pa_GetHostApiCount();

        /// <summary>Retrieve the index of the default host API. The default host API will bethe lowest common denominator host API on the current platform and isunlikely to provide the best performance.@return A non-negative value ranging from 0 to (Pa_GetHostApiCount()-1)indicating the default host API index or, a PaErrorCode (which are alwaysnegative) if PortAudio is not initialized or an error is encountered.</summary>
        [DllImport(__DllName, EntryPoint = "Pa_GetDefaultHostApi", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int Pa_GetDefaultHostApi();

        /// <summary>Retrieve a pointer to a structure containing information about a specifichost Api.@param hostApi A valid host API index ranging from 0 to (Pa_GetHostApiCount()-1)@return A pointer to an immutable PaHostApiInfo structure describinga specific host API. If the hostApi parameter is out of range or an erroris encountered, the function returns NULL.The returned structure is owned by the PortAudio implementation and must notbe manipulated or freed. The pointer is only guaranteed to be valid betweencalls to Pa_Initialize() and Pa_Terminate().</summary>
        [DllImport(__DllName, EntryPoint = "Pa_GetHostApiInfo", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern PaHostApiInfo* Pa_GetHostApiInfo(int hostApi);

        /// <summary>Convert a static host API unique identifier, into a runtimehost API index.@param type A unique host API identifier belonging to the PaHostApiTypeIdenumeration.@return A valid PaHostApiIndex ranging from 0 to (Pa_GetHostApiCount()-1) or,a PaErrorCode (which are always negative) if PortAudio is not initializedor an error is encountered.The paHostApiNotFound error code indicates that the host API specified by thetype parameter is not available.@see PaHostApiTypeId</summary>
        [DllImport(__DllName, EntryPoint = "Pa_HostApiTypeIdToHostApiIndex", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int Pa_HostApiTypeIdToHostApiIndex(PaHostApiTypeId type_);

        /// <summary>Convert a host-API-specific device index to standard PortAudio device index.This function may be used in conjunction with the deviceCount field ofPaHostApiInfo to enumerate all devices for the specified host API.@param hostApi A valid host API index ranging from 0 to (Pa_GetHostApiCount()-1)@param hostApiDeviceIndex A valid per-host device index in the range0 to (Pa_GetHostApiInfo(hostApi)-&gt;deviceCount-1)@return A non-negative PaDeviceIndex ranging from 0 to (Pa_GetDeviceCount()-1)or, a PaErrorCode (which are always negative) if PortAudio is not initializedor an error is encountered.A paInvalidHostApi error code indicates that the host API index specified bythe hostApi parameter is out of range.A paInvalidDevice error code indicates that the hostApiDeviceIndex parameteris out of range.@see PaHostApiInfo</summary>
        [DllImport(__DllName, EntryPoint = "Pa_HostApiDeviceIndexToDeviceIndex", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int Pa_HostApiDeviceIndexToDeviceIndex(int hostApi, int hostApiDeviceIndex);

        /// <summary>Return information about the last host error encountered. The errorinformation returned by Pa_GetLastHostErrorInfo() will never be modifiedasynchronously by errors occurring in other PortAudio owned threads(such as the thread that manages the stream callback.)This function is provided as a last resort, primarily to enhance debuggingby providing clients with access to all available error information.@return A pointer to an immutable structure constraining information aboutthe host error. The values in this structure will only be valid if aPortAudio function has previously returned the paUnanticipatedHostErrorerror code.</summary>
        [DllImport(__DllName, EntryPoint = "Pa_GetLastHostErrorInfo", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern PaHostErrorInfo* Pa_GetLastHostErrorInfo();

        /// <summary>Retrieve the number of available devices. The number of available devicesmay be zero.@return A non-negative value indicating the number of available devices or,a PaErrorCode (which are always negative) if PortAudio is not initializedor an error is encountered.</summary>
        [DllImport(__DllName, EntryPoint = "Pa_GetDeviceCount", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int Pa_GetDeviceCount();

        /// <summary>Retrieve the index of the default input device. The result can beused in the inputDevice parameter to Pa_OpenStream().@return The default input device index for the default host API, or paNoDeviceif no default input device is available or an error was encountered.</summary>
        [DllImport(__DllName, EntryPoint = "Pa_GetDefaultInputDevice", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int Pa_GetDefaultInputDevice();

        /// <summary>Retrieve the index of the default output device. The result can beused in the outputDevice parameter to Pa_OpenStream().@return The default output device index for the default host API, or paNoDeviceif no default output device is available or an error was encountered.@noteOn the PC, the user can specify a default device bysetting an environment variable. For example, to use device #1.&lt;pre&gt;set PA_RECOMMENDED_OUTPUT_DEVICE=1&lt;/pre&gt;The user should first determine the available device ids by usingthe supplied application \"pa_devs\".</summary>
        [DllImport(__DllName, EntryPoint = "Pa_GetDefaultOutputDevice", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int Pa_GetDefaultOutputDevice();

        /// <summary>Retrieve a pointer to a PaDeviceInfo structure containing informationabout the specified device.@return A pointer to an immutable PaDeviceInfo structure. If the deviceparameter is out of range the function returns NULL.@param device A valid device index in the range 0 to (Pa_GetDeviceCount()-1)@note PortAudio manages the memory referenced by the returned pointer,the client must not manipulate or free the memory. The pointer is onlyguaranteed to be valid between calls to Pa_Initialize() and Pa_Terminate().@see PaDeviceInfo, PaDeviceIndex</summary>
        [DllImport(__DllName, EntryPoint = "Pa_GetDeviceInfo", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern PaDeviceInfo* Pa_GetDeviceInfo(int device);

        /// <summary>Determine whether it would be possible to open a stream with the specifiedparameters.@param inputParameters A structure that describes the input parameters used toopen a stream. The suggestedLatency field is ignored. See PaStreamParametersfor a description of these parameters. inputParameters must be NULL foroutput-only streams.@param outputParameters A structure that describes the output parameters usedto open a stream. The suggestedLatency field is ignored. See PaStreamParametersfor a description of these parameters. outputParameters must be NULL forinput-only streams.@param sampleRate The required sampleRate. For full-duplex streams it is thesample rate for both input and output@return Returns 0 if the format is supported, and an error code indicating whythe format is not supported otherwise. The constant paFormatIsSupported isprovided to compare with the return value for success.@see paFormatIsSupported, PaStreamParameters</summary>
        [DllImport(__DllName, EntryPoint = "Pa_IsFormatSupported", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int Pa_IsFormatSupported(PaStreamParameters* inputParameters, PaStreamParameters* outputParameters, double sampleRate);

        /// <summary>Opens a stream for either input, output or both.@param stream The address of a PaStream pointer which will receivea pointer to the newly opened stream.@param inputParameters A structure that describes the input parameters used bythe opened stream. See PaStreamParameters for a description of these parameters.inputParameters must be NULL for output-only streams.@param outputParameters A structure that describes the output parameters used bythe opened stream. See PaStreamParameters for a description of these parameters.outputParameters must be NULL for input-only streams.@param sampleRate The desired sampleRate. For full-duplex streams it is thesample rate for both input and output. Note that the actual sampleRatemay differ very slightly from the desired rate because of hardware limitations.The exact rate can be queried using Pa_GetStreamInfo(). If nothing closeto the desired sampleRate is available then the open will fail and return an error.@param framesPerBuffer The number of frames passed to the stream callbackfunction, or the preferred block granularity for a blocking read/write stream.The special value paFramesPerBufferUnspecified (0) may be used to request thatthe stream callback will receive an optimal (and possibly varying) number offrames based on host requirements and the requested latency settings.Note: With some host APIs, the use of non-zero framesPerBuffer for a callbackstream may introduce an additional layer of buffering which could introduceadditional latency. PortAudio guarantees that the additional latencywill be kept to the theoretical minimum however, it is strongly recommendedthat a non-zero framesPerBuffer value only be used when your algorithmrequires a fixed number of frames per stream callback.@param streamFlags Flags which modify the behavior of the streaming process.This parameter may contain a combination of flags ORed together. Some flags mayonly be relevant to certain buffer formats.@param streamCallback A pointer to a client supplied function that is responsiblefor processing and filling input and output buffers. If this parameter is NULLthe stream will be opened in 'blocking read/write' mode. In blocking mode,the client can receive sample data using Pa_ReadStream and write sample datausing Pa_WriteStream, the number of samples that may be read or writtenwithout blocking is returned by Pa_GetStreamReadAvailable andPa_GetStreamWriteAvailable respectively.@param userData A client supplied pointer which is passed to the stream callbackfunction. It could for example, contain a pointer to instance data necessaryfor processing the audio buffers. This parameter is ignored if streamCallbackis NULL.@returnUpon success Pa_OpenStream() returns paNoError and places a pointer to avalid PaStream in the stream argument. The stream is inactive (stopped).If a call to Pa_OpenStream() fails, a non-zero error code is returned (seePaError for possible error codes) and the value of stream is invalid.@see PaStreamParameters, PaStreamCallback, Pa_ReadStream, Pa_WriteStream,Pa_GetStreamReadAvailable, Pa_GetStreamWriteAvailable</summary>
        [DllImport(__DllName, EntryPoint = "Pa_OpenStream", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int Pa_OpenStream(void** stream, PaStreamParameters* inputParameters, PaStreamParameters* outputParameters, double sampleRate, CULong framesPerBuffer, CULong streamFlags, delegate* unmanaged[Cdecl]<void*, void*, CULong, PaStreamCallbackTimeInfo*, CULong, void*, int> streamCallback, void* userData);

        /// <summary>A simplified version of Pa_OpenStream() that opens the default inputand/or output devices.@param stream The address of a PaStream pointer which will receivea pointer to the newly opened stream.@param numInputChannels  The number of channels of sound that will be suppliedto the stream callback or returned by Pa_ReadStream. It can range from 1 tothe value of maxInputChannels in the PaDeviceInfo record for the default inputdevice. If 0 the stream is opened as an output-only stream.@param numOutputChannels The number of channels of sound to be delivered to thestream callback or passed to Pa_WriteStream. It can range from 1 to the valueof maxOutputChannels in the PaDeviceInfo record for the default output device.If 0 the stream is opened as an input-only stream.@param sampleFormat The sample format of both the input and output buffersprovided to the callback or passed to and from Pa_ReadStream and Pa_WriteStream.sampleFormat may be any of the formats described by the PaSampleFormatenumeration.@param sampleRate Same as Pa_OpenStream parameter of the same name.@param framesPerBuffer Same as Pa_OpenStream parameter of the same name.@param streamCallback Same as Pa_OpenStream parameter of the same name.@param userData Same as Pa_OpenStream parameter of the same name.@return As for Pa_OpenStream@see Pa_OpenStream, PaStreamCallback</summary>
        [DllImport(__DllName, EntryPoint = "Pa_OpenDefaultStream", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int Pa_OpenDefaultStream(void** stream, int numInputChannels, int numOutputChannels, CULong sampleFormat, double sampleRate, CULong framesPerBuffer, delegate* unmanaged[Cdecl]<void*, void*, CULong, PaStreamCallbackTimeInfo*, CULong, void*, int> streamCallback, void* userData);

        /// <summary>Closes an audio stream. If the audio stream is active itdiscards any pending buffers as if Pa_AbortStream() had been called.</summary>
        [DllImport(__DllName, EntryPoint = "Pa_CloseStream", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int Pa_CloseStream(void* stream);

        /// <summary>Register a stream finished callback function which will be called when thestream becomes inactive. See the description of PaStreamFinishedCallback forfurther details about when the callback will be called.@param stream a pointer to a PaStream that is in the stopped state - if thestream is not stopped, the stream's finished callback will remain unchangedand an error code will be returned.@param streamFinishedCallback a pointer to a function with the same signatureas PaStreamFinishedCallback, that will be called when the stream becomesinactive. Passing NULL for this parameter will un-register a previouslyregistered stream finished callback function.@return on success returns paNoError, otherwise an error code indicating the causeof the error.@see PaStreamFinishedCallback</summary>
        [DllImport(__DllName, EntryPoint = "Pa_SetStreamFinishedCallback", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int Pa_SetStreamFinishedCallback(void* stream, delegate* unmanaged[Cdecl]<void*, void> streamFinishedCallback);

        /// <summary>Commences audio processing.</summary>
        [DllImport(__DllName, EntryPoint = "Pa_StartStream", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int Pa_StartStream(void* stream);

        /// <summary>Terminates audio processing. It waits until all pendingaudio buffers have been played before it returns.</summary>
        [DllImport(__DllName, EntryPoint = "Pa_StopStream", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int Pa_StopStream(void* stream);

        /// <summary>Terminates audio processing promptly without necessarily waiting forpending buffers to complete.</summary>
        [DllImport(__DllName, EntryPoint = "Pa_AbortStream", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int Pa_AbortStream(void* stream);

        /// <summary>Determine whether the stream is stopped.A stream is considered to be stopped prior to a successful call toPa_StartStream and after a successful call to Pa_StopStream or Pa_AbortStream.If a stream callback returns a value other than paContinue the stream is NOTconsidered to be stopped.@return Returns one (1) when the stream is stopped, zero (0) whenthe stream is running or, a PaErrorCode (which are always negative) ifPortAudio is not initialized or an error is encountered.@see Pa_StopStream, Pa_AbortStream, Pa_IsStreamActive</summary>
        [DllImport(__DllName, EntryPoint = "Pa_IsStreamStopped", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int Pa_IsStreamStopped(void* stream);

        /// <summary>Determine whether the stream is active.A stream is active after a successful call to Pa_StartStream(), until itbecomes inactive either as a result of a call to Pa_StopStream() orPa_AbortStream(), or as a result of a return value other than paContinue fromthe stream callback. In the latter case, the stream is considered inactiveafter the last buffer has finished playing.@return Returns one (1) when the stream is active (ie playing or recordingaudio), zero (0) when not playing or, a PaErrorCode (which are always negative)if PortAudio is not initialized or an error is encountered.@see Pa_StopStream, Pa_AbortStream, Pa_IsStreamStopped</summary>
        [DllImport(__DllName, EntryPoint = "Pa_IsStreamActive", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int Pa_IsStreamActive(void* stream);

        /// <summary>Retrieve a pointer to a PaStreamInfo structure containing informationabout the specified stream.@return A pointer to an immutable PaStreamInfo structure. If the streamparameter is invalid, or an error is encountered, the function returns NULL.@param stream A pointer to an open stream previously created with Pa_OpenStream.@note PortAudio manages the memory referenced by the returned pointer,the client must not manipulate or free the memory. The pointer is onlyguaranteed to be valid until the specified stream is closed.@see PaStreamInfo</summary>
        [DllImport(__DllName, EntryPoint = "Pa_GetStreamInfo", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern PaStreamInfo* Pa_GetStreamInfo(void* stream);

        /// <summary>Returns the current time in seconds for a stream according to the same clock usedto generate callback PaStreamCallbackTimeInfo timestamps. The time values aremonotonically increasing and have unspecified origin.Pa_GetStreamTime returns valid time values for the entire life of the stream,from when the stream is opened until it is closed. Starting and stopping the streamdoes not affect the passage of time returned by Pa_GetStreamTime.This time may be used for synchronizing other events to the audio stream, forexample synchronizing audio to MIDI.@return The stream's current time in seconds, or 0 if an error occurred.@see PaTime, PaStreamCallback, PaStreamCallbackTimeInfo</summary>
        [DllImport(__DllName, EntryPoint = "Pa_GetStreamTime", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern double Pa_GetStreamTime(void* stream);

        /// <summary>Retrieve CPU usage information for the specified stream.The \"CPU Load\" is a fraction of total CPU time consumed by a callback stream'saudio processing routines including, but not limited to the client suppliedstream callback. This function does not work with blocking read/write streams.This function may be called from the stream callback function or theapplication.@returnA floating point value, typically between 0.0 and 1.0, where 1.0 indicatesthat the stream callback is consuming the maximum number of CPU cycles possibleto maintain real-time operation. A value of 0.5 would imply that PortAudio andthe stream callback was consuming roughly 50% of the available CPU time. Thereturn value may exceed 1.0. A value of 0.0 will always be returned for ablocking read/write stream, or if an error occurs.</summary>
        [DllImport(__DllName, EntryPoint = "Pa_GetStreamCpuLoad", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern double Pa_GetStreamCpuLoad(void* stream);

        /// <summary>Read samples from an input stream. The function doesn't return untilthe entire buffer has been filled - this may involve waiting for the operatingsystem to supply the data.Reading from a stream that is stopped is not currently supported. In particular,it is not possible to drain the read buffer by calling Pa_ReadStream aftercalling Pa_StopStream.@param stream A pointer to an open stream previously created with Pa_OpenStream.@param buffer A pointer to a buffer of sample frames. The buffer containssamples in the format specified by the inputParameters-&gt;sampleFormat fieldused to open the stream, and the number of channels specified byinputParameters-&gt;numChannels. If non-interleaved samples were requested usingthe paNonInterleaved sample format flag, buffer is a pointer to the first elementof an array of buffer pointers, one non-interleaved buffer for each channel.@param frames The number of frames to be read into buffer. This parameteris not constrained to a specific range, however high performance applicationswill want to match this parameter to the framesPerBuffer parameter usedwhen opening the stream.@return On success PaNoError will be returned, or PaInputOverflowed if inputdata was discarded by PortAudio after the previous call and before this call.</summary>
        [DllImport(__DllName, EntryPoint = "Pa_ReadStream", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int Pa_ReadStream(void* stream, void* buffer, CULong frames);

        /// <summary>Write samples to an output stream. This function doesn't return until theentire buffer has been written - this may involve waiting for the operatingsystem to consume the data.Writing to a stream that is stopped is not currently supported. In particular,it is not possible to prefill the write buffer by calling Pa_WriteStreamprior to calling Pa_StartStream.@param stream A pointer to an open stream previously created with Pa_OpenStream.@param buffer A pointer to a buffer of sample frames. The buffer containssamples in the format specified by the outputParameters-&gt;sampleFormat fieldused to open the stream, and the number of channels specified byoutputParameters-&gt;numChannels. If non-interleaved samples were requested usingthe paNonInterleaved sample format flag, buffer is a pointer to the first elementof an array of buffer pointers, one non-interleaved buffer for each channel.@param frames The number of frames to be written from buffer. This parameteris not constrained to a specific range, however high performance applicationswill want to match this parameter to the framesPerBuffer parameter usedwhen opening the stream.@return On success PaNoError will be returned, or paOutputUnderflowed ifadditional output data was inserted after the previous call and before thiscall.</summary>
        [DllImport(__DllName, EntryPoint = "Pa_WriteStream", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int Pa_WriteStream(void* stream, void* buffer, CULong frames);

        /// <summary>Retrieve the number of frames that can be read from the stream withoutwaiting.When the stream is stopped the return value of Pa_GetStreamReadAvailable is notdefined.@return Returns a non-negative value representing the maximum number of framesthat can be read from the stream without blocking or busy waiting or, aPaErrorCode (which are always negative) if PortAudio is not initialized or anerror is encountered.</summary>
        [DllImport(__DllName, EntryPoint = "Pa_GetStreamReadAvailable", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern CLong Pa_GetStreamReadAvailable(void* stream);

        /// <summary>Retrieve the number of frames that can be written to the stream withoutwaiting.When the stream is stopped the return value of Pa_GetStreamWriteAvailable is notdefined.@return Returns a non-negative value representing the maximum number of framesthat can be written to the stream without blocking or busy waiting or, aPaErrorCode (which are always negative) if PortAudio is not initialized or anerror is encountered.</summary>
        [DllImport(__DllName, EntryPoint = "Pa_GetStreamWriteAvailable", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern CLong Pa_GetStreamWriteAvailable(void* stream);

        /// <summary>Retrieve the size of a given sample format in bytes.@return The size in bytes of a single sample in the specified format,or paSampleFormatNotSupported if the format is not supported.</summary>
        [DllImport(__DllName, EntryPoint = "Pa_GetSampleSize", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int Pa_GetSampleSize(CULong format);

        /// <summary>Put the caller to sleep for at least 'msec' milliseconds. This function isprovided only as a convenience for authors of portable code (such as the testsand examples in the PortAudio distribution.)The function may sleep longer than requested so don't rely on this for accuratemusical timing.</summary>
        [DllImport(__DllName, EntryPoint = "Pa_Sleep", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void Pa_Sleep(CLong msec);


    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct PaVersionInfo
    {
        public int versionMajor;
        public int versionMinor;
        public int versionSubMinor;
        public byte* versionControlRevision;
        public byte* versionText;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct PaHostApiInfo
    {
        public int structVersion;
        public PaHostApiTypeId type_;
        public byte* name;
        public int deviceCount;
        public int defaultInputDevice;
        public int defaultOutputDevice;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct PaHostErrorInfo
    {
        public PaHostApiTypeId hostApiType;
        public CLong errorCode;
        public byte* errorText;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct PaDeviceInfo
    {
        public int structVersion;
        public byte* name;
        public int hostApi;
        public int maxInputChannels;
        public int maxOutputChannels;
        public double defaultLowInputLatency;
        public double defaultLowOutputLatency;
        public double defaultHighInputLatency;
        public double defaultHighOutputLatency;
        public double defaultSampleRate;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct PaStreamParameters
    {
        public int device;
        public int channelCount;
        public CULong sampleFormat;
        public double suggestedLatency;
        public void* hostApiSpecificStreamInfo;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct PaStreamCallbackTimeInfo
    {
        public double inputBufferAdcTime;
        public double currentTime;
        public double outputBufferDacTime;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct PaStreamInfo
    {
        public int structVersion;
        public double inputLatency;
        public double outputLatency;
        public double sampleRate;
    }



}
