// <auto-generated>
// This code is generated by csbindgen.
// DON'T CHANGE THIS DIRECTLY.
// </auto-generated>
#pragma warning disable CS8500
#pragma warning disable CS8981
using System;
using System.Runtime.InteropServices;
using PortAudio.Unsafe;


namespace PortAudio.Unsafe.Linux
{
    public static unsafe partial class NativeMethodsAlsa
    {
        const string __DllName = "portaudio";



        /// <summary>Initialize host API specific structure, call this before setting relevant attributes.</summary>
        [DllImport(__DllName, EntryPoint = "PaAlsa_InitializeStreamInfo", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void PaAlsa_InitializeStreamInfo(PaAlsaStreamInfo* info);

        /// <summary>Instruct whether to enable real-time priority when starting the audio thread. If this is turned on by the stream is started, the audio callback thread will be created with the FIFO scheduling policy, which is suitable for realtime operation.</summary>
        [DllImport(__DllName, EntryPoint = "PaAlsa_EnableRealtimeScheduling", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void PaAlsa_EnableRealtimeScheduling(void* s, int enable);

        /// <summary>Get the ALSA-lib card index of this stream's input device.</summary>
        [DllImport(__DllName, EntryPoint = "PaAlsa_GetStreamInputCard", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int PaAlsa_GetStreamInputCard(void* s, int* card);

        /// <summary>Get the ALSA-lib card index of this stream's output device.</summary>
        [DllImport(__DllName, EntryPoint = "PaAlsa_GetStreamOutputCard", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int PaAlsa_GetStreamOutputCard(void* s, int* card);

        /// <summary>Set the number of periods (buffer fragments) to configure devices with. By default the number of periods is 4, this is the lowest number of periods that works well on the author's soundcard. @param numPeriods The number of periods.</summary>
        [DllImport(__DllName, EntryPoint = "PaAlsa_SetNumPeriods", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int PaAlsa_SetNumPeriods(int numPeriods);

        /// <summary>Set the maximum number of times to retry opening busy device (sleeping for a short interval inbetween).</summary>
        [DllImport(__DllName, EntryPoint = "PaAlsa_SetRetriesBusy", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int PaAlsa_SetRetriesBusy(int retries);

        /// <summary>Set the path and name of ALSA library file if PortAudio is configured to load it dynamically (see  PA_ALSA_DYNAMIC). This setting will overwrite the default name set by PA_ALSA_PATHNAME define. @param pathName Full path with filename. Only filename can be used, but dlopen() will lookup default                 searchable directories (/usr/lib;/usr/local/lib) then.</summary>
        [DllImport(__DllName, EntryPoint = "PaAlsa_SetLibraryPathName", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void PaAlsa_SetLibraryPathName(byte* pathName);


    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe partial struct PaAlsaStreamInfo
    {
        public CULong size;
        public PaHostApiTypeId hostApiType;
        public CULong version;
        public byte* deviceString;
    }



}
