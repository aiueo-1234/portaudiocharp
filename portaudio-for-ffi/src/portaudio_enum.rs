/* automatically generated by rust-bindgen 0.69.4 */

#[repr(i32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum PaErrorCode {
    paNoError = 0,
    paNotInitialized = -10000,
    paUnanticipatedHostError = -9999,
    paInvalidChannelCount = -9998,
    paInvalidSampleRate = -9997,
    paInvalidDevice = -9996,
    paInvalidFlag = -9995,
    paSampleFormatNotSupported = -9994,
    paBadIODeviceCombination = -9993,
    paInsufficientMemory = -9992,
    paBufferTooBig = -9991,
    paBufferTooSmall = -9990,
    paNullCallback = -9989,
    paBadStreamPtr = -9988,
    paTimedOut = -9987,
    paInternalError = -9986,
    paDeviceUnavailable = -9985,
    paIncompatibleHostApiSpecificStreamInfo = -9984,
    paStreamIsStopped = -9983,
    paStreamIsNotStopped = -9982,
    paInputOverflowed = -9981,
    paOutputUnderflowed = -9980,
    paHostApiNotFound = -9979,
    paInvalidHostApi = -9978,
    paCanNotReadFromACallbackStream = -9977,
    paCanNotWriteToACallbackStream = -9976,
    paCanNotReadFromAnOutputOnlyStream = -9975,
    paCanNotWriteToAnInputOnlyStream = -9974,
    paIncompatibleStreamHostApi = -9973,
    paBadBufferPtr = -9972,
    paCanNotInitializeRecursively = -9971,
}
#[repr(u32)]
#[doc = " Unchanging unique identifiers for each supported host API. This type\nis used in the PaHostApiInfo structure. The values are guaranteed to be\nunique and to never change, thus allowing code to be written that\nconditionally uses host API specific extensions.\n\nNew type ids will be allocated when support for a host API reaches\n\"public alpha\" status, prior to that developers should use the\npaInDevelopment type id.\n\n@see PaHostApiInfo"]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum PaHostApiTypeId {
    paInDevelopment = 0,
    paDirectSound = 1,
    paMME = 2,
    paASIO = 3,
    paSoundManager = 4,
    paCoreAudio = 5,
    paOSS = 7,
    paALSA = 8,
    paAL = 9,
    paBeOS = 10,
    paWDMKS = 11,
    paJACK = 12,
    paWASAPI = 13,
    paAudioScienceHPI = 14,
    paAudioIO = 15,
    paPulseAudio = 16,
    paSndio = 17,
}
#[repr(u32)]
#[doc = "Allowable return values for the PaStreamCallback.\n@see PaStreamCallback"]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum PaStreamCallbackResult {
    #[doc = "< Signal that the stream should continue invoking the callback and processing audio."]
    paContinue = 0,
    #[doc = "< Signal that the stream should stop invoking the callback and finish once all output samples have played."]
    paComplete = 1,
    #[doc = "< Signal that the stream should stop invoking the callback and finish as soon as possible."]
    paAbort = 2,
}
