using System.Text;
using PortAudioCSharp.AutoGenerated;
using PortAudioCSharp.Devices;
using PortAudioCSharp.Exceptions;
using PortAudioCSharp.Wrapper;

namespace PortAudioCSharp;

public class HostApi
{
    private int _hostApiIndex;
    public PaHostApiTypeId Type { get; }
    public string Name { get; }
    public int DeviceCount { get; }
    public PortAudioDevice? DefaultInputDevice { get; }
    public PortAudioDevice? DefaultOutputDevice { get; }

    public HostApi() : this(PortAudioWrapper.GetDefaultHostApi(), true) { }

    public HostApi(PaHostApiTypeId paHostApiTypeId) : this(PortAudioWrapper.HostApiTypeIdToHostApiIndex(paHostApiTypeId), true) { }

    public HostApi(int apiIndex) : this(apiIndex, true) { }

    internal HostApi(int apiIndex, bool chakeError)
    {
        if (chakeError)
        {
            var avaliableApiCount = PortAudioWrapper.GetHostApiCount();
            if (avaliableApiCount < 0)
            {
                PortAudioException.Throw((PaErrorCode)avaliableApiCount);
            }
            ArgumentOutOfRangeException.ThrowIfGreaterThan(apiIndex, avaliableApiCount);
            if (apiIndex < 0)
            {
                PortAudioException.ThrowIfError(avaliableApiCount);
                throw new ArgumentOutOfRangeException(nameof(apiIndex));
            }
        }
        _hostApiIndex = apiIndex;
        var apiInfo = PortAudioWrapper.GetHostApiInfo(apiIndex);
        Type = apiInfo.Type;
        Name = UnicodeEncoding.Default.GetString(apiInfo.Name);

        DefaultInputDevice = apiInfo.DefaultInputDevice >= 0 ? new PortAudioDevice(apiInfo.DefaultInputDevice, this) : null;
        DefaultOutputDevice = apiInfo.DefaultOutputDevice >= 0 ? new PortAudioDevice(apiInfo.DefaultOutputDevice, this) : null;
    }

    public IEnumerable<PortAudioDevice> GetAllDevice()
    {
        return Enumerable.Range(0, DeviceCount).Select(i =>
        {
            var deviceIndex = PortAudioWrapper.HostApiDeviceIndexToDeviceIndex(_hostApiIndex, i);
            return new PortAudioDevice(deviceIndex, this);
        });
    }
}
